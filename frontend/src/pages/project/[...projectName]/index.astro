---
import MainLayout from "@/layouts/MainLayout.astro";
import {ImageStackForm} from "@/components/functional/ImageStackForm";
import {listFiles} from "@/lib/file-upload.repo";
import StackList from "@/components/functional/StackList.astro";
import {ImageListCarousel} from "../../../components/ui/ImageListCarousel";

const {projectName} = Astro.params

const filesInProject = await listFiles(projectName ?? "root")
const [inputFile, ...imageStacks] = [...new Set(filesInProject.map(file => file.name?.split("/")[1]).filter(Boolean) as string[])]

const outputFilesPromises = imageStacks.map(async stack => listFiles(projectName + encodeURIComponent("/") + stack + encodeURIComponent("/") + "outputs"))
const outputs = await Promise.all(outputFilesPromises)
  .then((res) =>
    res.flat()
      .sort((a, b) => b.lastModified === undefined || a.lastModified === undefined ? 0 : b.lastModified.getTime() - a.lastModified.getTime())
      .map(file => file.name?.replaceAll("/", encodeURIComponent("/")))
      .filter(Boolean) as string[]
  )

const filePath = `${projectName}${encodeURIComponent("/")}${inputFile}`
---
<MainLayout
    title={projectName}
    description="Project details."
>
  <video
      id="project-video"
      class="h-[500px]"
      src={`http://localhost:3001/file-upload/get/${filePath}`}
      controls
      preload="auto"
  />

  <h3 class="font-semibold mb-2">Outputs</h3>

  {
    outputs.length ? (
        <ImageListCarousel
            client:visible
            images={outputs}
        />
    ) : (
        <p class="text-muted-foreground">No outputs available.</p>
    )
  }

  <h3 class="font-semibold mb-2 mt-4">Image Stacks</h3>

  <StackList
      stacks={imageStacks}
      project={projectName}
  />

  <h3 class="font-semibold mt-4">Create new Image Stack</h3>

  <p class="text-muted-foreground mb-2">This creates a new stack of frames based on the project video.</p>

  <ImageStackForm
      client:visible
      project={`${projectName}/${inputFile}`}
      stacks={imageStacks}
  />
</MainLayout>
